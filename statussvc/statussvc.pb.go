// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/paralin/grpc-liveness/statussvc/statussvc.proto

/*
Package statussvc is a generated protocol buffer package.

It is generated from these files:
	github.com/paralin/grpc-liveness/statussvc/statussvc.proto

It has these top-level messages:
	GetLivenessRequest
	GetLivenessResponse
	GetReadinessRequest
	GetReadinessResponse
*/
package statussvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GetLivenessRequest is the request for getting liveness.
type GetLivenessRequest struct {
}

func (m *GetLivenessRequest) Reset()                    { *m = GetLivenessRequest{} }
func (m *GetLivenessRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLivenessRequest) ProtoMessage()               {}
func (*GetLivenessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// GetLivenessResponse is the response for getting liveness.
type GetLivenessResponse struct {
}

func (m *GetLivenessResponse) Reset()                    { *m = GetLivenessResponse{} }
func (m *GetLivenessResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLivenessResponse) ProtoMessage()               {}
func (*GetLivenessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// GetReadinessRequest is the request for getting readiness.
type GetReadinessRequest struct {
}

func (m *GetReadinessRequest) Reset()                    { *m = GetReadinessRequest{} }
func (m *GetReadinessRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReadinessRequest) ProtoMessage()               {}
func (*GetReadinessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// GetReadinessResponse is the request for getting readiness.
type GetReadinessResponse struct {
}

func (m *GetReadinessResponse) Reset()                    { *m = GetReadinessResponse{} }
func (m *GetReadinessResponse) String() string            { return proto.CompactTextString(m) }
func (*GetReadinessResponse) ProtoMessage()               {}
func (*GetReadinessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*GetLivenessRequest)(nil), "statussvc.GetLivenessRequest")
	proto.RegisterType((*GetLivenessResponse)(nil), "statussvc.GetLivenessResponse")
	proto.RegisterType((*GetReadinessRequest)(nil), "statussvc.GetReadinessRequest")
	proto.RegisterType((*GetReadinessResponse)(nil), "statussvc.GetReadinessResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StatusService service

type StatusServiceClient interface {
	// GetReadiness checks if the service is ready. Returns an error if not ready.
	GetReadiness(ctx context.Context, in *GetReadinessRequest, opts ...grpc.CallOption) (*GetReadinessResponse, error)
	// GetLiveness checks if the service is alive at all. Returns an error if not alive.
	GetLiveness(ctx context.Context, in *GetLivenessRequest, opts ...grpc.CallOption) (*GetLivenessResponse, error)
}

type statusServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatusServiceClient(cc *grpc.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) GetReadiness(ctx context.Context, in *GetReadinessRequest, opts ...grpc.CallOption) (*GetReadinessResponse, error) {
	out := new(GetReadinessResponse)
	err := grpc.Invoke(ctx, "/statussvc.StatusService/GetReadiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) GetLiveness(ctx context.Context, in *GetLivenessRequest, opts ...grpc.CallOption) (*GetLivenessResponse, error) {
	out := new(GetLivenessResponse)
	err := grpc.Invoke(ctx, "/statussvc.StatusService/GetLiveness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusService service

type StatusServiceServer interface {
	// GetReadiness checks if the service is ready. Returns an error if not ready.
	GetReadiness(context.Context, *GetReadinessRequest) (*GetReadinessResponse, error)
	// GetLiveness checks if the service is alive at all. Returns an error if not alive.
	GetLiveness(context.Context, *GetLivenessRequest) (*GetLivenessResponse, error)
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_GetReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statussvc.StatusService/GetReadiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetReadiness(ctx, req.(*GetReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_GetLiveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetLiveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statussvc.StatusService/GetLiveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetLiveness(ctx, req.(*GetLivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statussvc.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReadiness",
			Handler:    _StatusService_GetReadiness_Handler,
		},
		{
			MethodName: "GetLiveness",
			Handler:    _StatusService_GetLiveness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/paralin/grpc-liveness/statussvc/statussvc.proto",
}

func init() {
	proto.RegisterFile("github.com/paralin/grpc-liveness/statussvc/statussvc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x48, 0x2c, 0x4a, 0xcc, 0xc9, 0xcc, 0xd3, 0x4f,
	0x2f, 0x2a, 0x48, 0xd6, 0xcd, 0xc9, 0x2c, 0x4b, 0xcd, 0x4b, 0x2d, 0x2e, 0xd6, 0x2f, 0x2e, 0x49,
	0x2c, 0x29, 0x2d, 0x2e, 0x2e, 0x4b, 0x46, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38,
	0xe1, 0x02, 0x4a, 0x22, 0x5c, 0x42, 0xee, 0xa9, 0x25, 0x3e, 0x50, 0x3d, 0x41, 0xa9, 0x85, 0xa5,
	0xa9, 0xc5, 0x25, 0x4a, 0xa2, 0x5c, 0xc2, 0x28, 0xa2, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x50,
	0xe1, 0xa0, 0xd4, 0xc4, 0x94, 0x4c, 0x64, 0xd5, 0x62, 0x5c, 0x22, 0xa8, 0xc2, 0x10, 0xe5, 0x46,
	0x9b, 0x18, 0xb9, 0x78, 0x83, 0xc1, 0x36, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x05,
	0x72, 0xf1, 0x20, 0xab, 0x14, 0x92, 0xd3, 0x43, 0x38, 0x0d, 0x8b, 0xc9, 0x52, 0xf2, 0x38, 0xe5,
	0xa1, 0x2e, 0x62, 0x10, 0xf2, 0xe3, 0xe2, 0x46, 0x72, 0xaa, 0x90, 0x2c, 0xaa, 0x0e, 0x34, 0x8f,
	0x49, 0xc9, 0xe1, 0x92, 0x86, 0x99, 0x97, 0xc4, 0x06, 0x0e, 0x22, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x50, 0x86, 0xa8, 0xe3, 0x60, 0x01, 0x00, 0x00,
}
